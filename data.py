from execute import Execute
from operator import itemgetter
from language import Language


class DATA:
    def __init__(self):
        self.delivery = {'pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑',
                         'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞'}
        self.kind_pickup = {'record_answer_shop': '–ú–æ—Å–∫–≤–∞, –•–∞—á–∞—Ç—É—Ä—è–Ω–∞, 8 –∫–æ—Ä–ø—É—Å 3 (–ú–∞–≥–∞–∑–∏–Ω)',
                            'record_answer_storage': '–ú—ã—Ç–∏—â–∏, 1-–∞—è –ù–æ–≤–∞—è, 57 (–°–∫–ª–∞–¥)'}
        self.kind_delivery = {'record_answer_moscow': '–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î',
                              'record_answer_pek': '–¢–ö –ü–≠–ö',
                              'record_answer_dl': '–¢–ö –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏',
                              'record_answer_mt': '–¢–ö –ú–µ–π–¥–∂–∏–∫ –¢—Ä–∞–Ω—Å',
                              'record_answer_cdek': '–¢–ö –°–î–≠–ö'}
        self.execute = Execute()
        self.language_data = Language()

    async def get_first_keyboard(self, id_user: int, status_user: str, user_language: str) -> dict:
        text_basket = await self.get_basket(id_user)
        amount_order = await self.execute.get_amount_order(id_user)
        language_first_keyboard = {'russian': {'text_news': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                               'text_orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è (–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {str(amount_order)})',
                                               'text_basket': text_basket['basket'][user_language],
                                               'text_catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ',
                                               'text_update': '–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—èüí¨',
                                               'text_add_status': '–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Åüòé'},
                                   'azerbaijani': {'text_news': 'X…ôb…ôrl…ôr üì£üåêüí¨',
                                                   'text_orders': f'Sifari≈ül…ôrim üóÉÔ∏è (Yeni sifari≈ül…ôr: '
                                                                  f'{str(amount_order)})',
                                                   'text_basket': text_basket['basket'][user_language],
                                                   'text_catalog': 'KataloqüßæüëÄ',
                                                   'text_update': 'Mesajlarƒ± yenil…ôyinüí¨',
                                                   'text_add_status': 'Status verinüòé'}
                                   }
        if status_user == 'creator':
            first_keyboard = {'https://t.me/rossvik_moscow': language_first_keyboard[user_language]['text_news'],
                              'orders': language_first_keyboard[user_language]['text_orders'],
                              'basket': language_first_keyboard[user_language]['text_basket'],
                              'catalog': language_first_keyboard[user_language]['text_catalog'],
                              'update': language_first_keyboard[user_language]['text_update'],
                              'add_status': language_first_keyboard[user_language]['text_add_status']}
        elif status_user == 'admin':
            first_keyboard = {'https://t.me/rossvik_moscow': language_first_keyboard[user_language]['text_news'],
                              'orders': language_first_keyboard[user_language]['text_orders'],
                              'basket': language_first_keyboard[user_language]['text_basket'],
                              'catalog': language_first_keyboard[user_language]['text_catalog'],
                              'add_status': language_first_keyboard[user_language]['text_add_status']}
        else:
            first_keyboard = {'https://t.me/rossvik_moscow': language_first_keyboard[user_language]['text_news'],
                              'orders': language_first_keyboard[user_language]['text_orders'],
                              'basket': language_first_keyboard[user_language]['text_basket'],
                              'catalog': language_first_keyboard[user_language]['text_catalog']}
        return first_keyboard

    @staticmethod
    async def get_info_help(language_user: str) -> str:
        space = '\n'
        language_help = {'russian': {'first_str': '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ª–µ–¥—É—é—â–∏–µ '
                                                  '–∫–æ–º–∞–Ω–¥—ã:',
                                     'menu_str': '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                     'catalog_str': '–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–∞',
                                     'news_str': '–Ω–æ–≤–æ—Å—Ç–∏',
                                     'basket_str': '–∫–æ—Ä–∑–∏–Ω–∞',
                                     'order_str': '–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤',
                                     'main_str': f'–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞:{space}{space}–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç '
                                                 f'–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–º—É '
                                                 f'–ø—Ä–æ–±–µ–ª–∞–º–∏. –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, –Ω–æ –∏ —Å–∏–º–≤–æ–ª—ã, '
                                                 f'–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.{space}–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, '
                                                 f'–∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ:{space}'
                                                 f'–ø–ª–∞—Å—Ç –≤—Å—Ç{space}{space}–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò: '
                                                 f'–í—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ë–æ—Ç–æ–º –∏ '
                                                 f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ '
                                                 f'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é '
                                                 f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é,'
                                                 f' –∞ —Ç–∞–∫–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—é –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ.'},
                         'azerbaijani': {'first_str': 'a≈üaƒüƒ±dakƒ±larƒ± g√∂nd…ôr…ôr…ôk s√ºr…ôtli naviqasiyadan faydalana '
                                                      'bil…ôrsiniz komandalar:',
                                         'menu_str': '…ôsas menyu',
                                         'catalog_str': 'm…ôhsul kataloqu',
                                         'news_str': 'x…ôb…ôrl…ôr',
                                         'basket_str': 's…ôb…ôt',
                                         'order_str': 'sifari≈ü tarixi',
                                         'main_str': f'm…ôhsul axtarƒ±≈üƒ±:{space}{space}Bota mesaj g√∂nd…ôr…ôrk…ôn '
                                                     f'b√∂l√ºnm√º≈ü mesaj m…ôzmununa g√∂r…ô Kataloqda m…ôhsul axtarƒ±n '
                                                     f'bo≈üluqlar. Yalnƒ±z s√∂zl…ôri deyil, simvollarƒ± da g√∂st…ôr…ô '
                                                     f'bil…ôrsiniz, mallarƒ±n adƒ±nda olanlar.{space}anlamaq √º√ß√ºn, '
                                                     f'nec…ô i≈ül…ôyir, Bota mesaj g√∂nd…ôrm…ôy…ô √ßalƒ±≈üƒ±n:{space}'
                                                     f'–ø–ª–∞—Å—Ç –≤—Å—Ç{space}{space}M…ôxfilik Bildiri≈üi: '
                                                     f'bot v…ô arasƒ±ndakƒ± qar≈üƒ±lƒ±qlƒ± …ôlaq…ô prosesind…ô …ôld…ô edil…ôn b√ºt√ºn '
                                                     f'm…ôlumatlar istifad…ô√ßi: foto, video, m…ôtn m…ôlumat, el…ôc…ô d…ô h…ôr '
                                                     f'hansƒ± m…ôxfi olan s…ôn…ôdl…ôr g√∂nd…ôrildi m…ôlumat istifad…ô edil…ô '
                                                     f'bilm…ôz, kopyalana bilm…ôz, payla≈üƒ±la bilm…ôz, v…ô onlara …ôsaslanan '
                                                     f'h…ôr hansƒ± dig…ôr h…ôr…ôk…ôtl…ôrin h…ôyata ke√ßirilm…ôsi.'}
                         }
        info = f"{language_help[language_user]['first_str']}{space}{space}" \
               f"/start - {language_help[language_user]['menu_str']}{space}" \
               f"/catalog - {language_help[language_user]['catalog_str']}{space}" \
               f"/news - {language_help[language_user]['news_str']}{space}" \
               f"/basket - {language_help[language_user]['basket_str']}{space}" \
               f"/order - {language_help[language_user]['order_str']}{space}" \
               f"{space}{language_help[language_user]['main_str']}"
        return info

    @staticmethod
    async def get_prices(language_user: str) -> dict:
        language_price = {'russian': {'repair_materials': '–®–∏–Ω–æ—Ä–µ–º–æ–Ω—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚úÇ‚öí',
                                      'valves': '–í–µ–Ω—Ç–∏–ª–∏ üîå',
                                      'repair_spikes': '–†–µ–º–æ–Ω—Ç–Ω—ã–µ —à–∏–ø—ã ‚Äçüåµ',
                                      'balancing_weights': '–ì—Ä—É–∑–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ—á–Ω—ã–µ ‚öñ',
                                      'tire_fitting_equipment': '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üöóüîß',
                                      'lifting_equipment': '–ü–æ–¥—ä–µ–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚õì',
                                      'hand_tool': '–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üîß',
                                      'special_tools': '–°–ø–µ—Ü–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üõ†',
                                      'refueling_air_conditioners': '–ó–∞–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ ‚ùÑ',
                                      'compressors': '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã ‚õΩ',
                                      'pneumatic_tool': '–ü–Ω–µ–≤–º–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üé£',
                                      'pneumolines': '–ü–Ω–µ–≤–º–æ–ª–∏–Ω–∏–∏ üí®üíß',
                                      'consumables_car_service': '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ üìúüöó',
                                      'washing_cleaning_equipment': '–ú–æ–µ—á–Ω–æ-—É–±–æ—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üßπ',
                                      'auto_chemistry': '–ê–≤—Ç–æ–•–∏–º–∏—è ‚ò£‚öó',
                                      'garage_equipment': '–ì–∞—Ä–∞–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üë®üèæ‚Äçüîß',
                                      'diagnostic_equipment': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üïµÔ∏è‚Äç‚ôÄ',
                                      'oil_changing_equipment': '–ú–∞—Å–ª–æ—Å–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üí¶üõ¢Ô∏è',
                                      'spare_parts': '–ó–∞–ø—á–∞—Å—Ç–∏ üß©‚öôÔ∏è',
                                      'garden_equipment': '–°–∞–¥–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üë©‚Äçüåæ',
                                      'power_tool': '–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üîã',
                                      'automotive_products': '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã üç±',
                                      'car_service_furniture': '–ú–µ–±–µ–ª—å –¥–ª—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ üóÑÔ∏è',
                                      'exhaust_gas_extraction': '–í—ã—Ç—è–∂–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–∞–∑–æ–≤ ‚ô®',
                                      'convergence_collapse': '–°—Ö–æ–¥/—Ä–∞–∑–≤–∞–ª—ã üî©üìê',
                                      'washing_parts': '–ú–æ–π–∫–∏ –¥–µ—Ç–∞–ª–µ–π üõÅ',
                                      'express_service': '–≠–∫—Å–ø—Ä–µ—Å—Å-—Å–µ—Ä–≤–∏—Å üöÖü§ùüèª',
                                      'chargers': '–ó–∞—Ä—è–¥–Ω—ã–µ –∏ –ø—É—Å–∫–æ-–∑–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚ö°',
                                      'cutting_tool': '–†–µ–∂—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üî™'
                                      },
                          'azerbaijani': {'repair_materials': '≈ûin t…ômiri materiallarƒ± ‚úÇ‚öí',
                                          'valves': 'Vana üîå',
                                          'repair_spikes': 'T…ômir tƒ±rmanƒ±≈ütƒ±r ‚Äçüåµ',
                                          'balancing_weights': 'Balans √ß…ôkil…ôri ‚öñ',
                                          'tire_fitting_equipment': '≈ûin montaj avadanlƒ±ƒüƒ± üöóüîß',
                                          'lifting_equipment': 'Qaldƒ±rƒ±cƒ± avadanlƒ±q ‚õì',
                                          'hand_tool': '∆èl al…ôti üîß',
                                          'special_tools': 'X√ºsusi al…ôt üõ†',
                                          'refueling_air_conditioners': 'Kondisionerl…ôrin doldurulmasƒ± ‚ùÑ',
                                          'compressors': 'Kompressorlar ‚õΩ',
                                          'pneumatic_tool': 'Pnevmatik al…ôt üé£',
                                          'pneumolines': 'Pnevmoliniya üí®üíß',
                                          'consumables_car_service': 'Avtomobil xidm…ôti √º√ß√ºn istehlak materiallarƒ± üìúüöó',
                                          'washing_cleaning_equipment': 'Yuyucu v…ô t…ômizl…ôyici avadanlƒ±q üßπ',
                                          'auto_chemistry': 'Avtokimya ‚ò£‚öó',
                                          'garage_equipment': 'Qaraj avadanlƒ±ƒüƒ± üë®üèæ‚Äçüîß',
                                          'diagnostic_equipment': 'Diaqnostik avadanlƒ±q üïµÔ∏è‚Äç‚ôÄ',
                                          'oil_changing_equipment': 'Yaƒü d…ôyi≈üdirm…ô avadanlƒ±ƒüƒ± üí¶üõ¢Ô∏è',
                                          'spare_parts': 'Ehtiyat hiss…ôl…ôri üß©‚öôÔ∏è',
                                          'garden_equipment': 'Baƒü texnikasƒ± üë©‚Äçüåæ',
                                          'power_tool': 'Elektrik al…ôti üîã',
                                          'automotive_products': 'Avtovaƒüzal üç±',
                                          'car_service_furniture': 'Avtomobil xidm…ôti √º√ß√ºn mebel üóÑÔ∏è',
                                          'exhaust_gas_extraction': 'ƒ∞≈ül…ônmi≈ü qaz ekstraktƒ± ‚ô®',
                                          'convergence_collapse': 'Yƒ±xƒ±lma/Kamber üî©üìê',
                                          'washing_parts': 'Yuma hiss…ôl…ôri üõÅ',
                                          'express_service': 'Ekspress xidm…ôt üöÖü§ùüèª',
                                          'chargers': '≈ûarj cihazlarƒ± v…ô ≈üarj cihazlarƒ± ‚ö°',
                                          'cutting_tool': 'K…ôsm…ô al…ôti üî™'}
                          }
        price = [['506', language_price[language_user]['repair_materials'], 100],
                 ['507', language_price[language_user]['valves'], 100],
                 ['556', language_price[language_user]['repair_spikes'], 100],
                 ['658', language_price[language_user]['balancing_weights'], 100],
                 ['552', language_price[language_user]['tire_fitting_equipment'], 100],
                 ['600', language_price[language_user]['lifting_equipment'], 100],
                 ['547', language_price[language_user]['hand_tool'], 100],
                 ['608', language_price[language_user]['special_tools'], 100],
                 ['726', language_price[language_user]['refueling_air_conditioners'], 100],
                 ['549', language_price[language_user]['compressors'], 100],
                 ['597', language_price[language_user]['pneumatic_tool'], 100],
                 ['707', language_price[language_user]['pneumolines'], 100],
                 ['623', language_price[language_user]['consumables_car_service'], 100],
                 ['946', language_price[language_user]['washing_cleaning_equipment'], 100],
                 ['493', language_price[language_user]['auto_chemistry'], 100],
                 ['580', language_price[language_user]['garage_equipment'], 100],
                 ['593', language_price[language_user]['diagnostic_equipment'], 100],
                 ['603', language_price[language_user]['oil_changing_equipment'], 100],
                 ['702', language_price[language_user]['spare_parts'], 100],
                 ['1101', language_price[language_user]['garden_equipment'], 100],
                 ['738', language_price[language_user]['power_tool'], 100],
                 ['1100', language_price[language_user]['automotive_products'], 100],
                 ['688', language_price[language_user]['car_service_furniture'], 100],
                 ['1095', language_price[language_user]['exhaust_gas_extraction'], 100],
                 ['660', language_price[language_user]['convergence_collapse'], 100],
                 ['663', language_price[language_user]['washing_parts'], 100],
                 ['692', language_price[language_user]['express_service'], 100],
                 ['942', language_price[language_user]['chargers'], 100],
                 ['1237', language_price[language_user]['cutting_tool'], 100]]
        dict_price = {}
        for item in sorted(price, key=itemgetter(2), reverse=False):
            dict_price[item[0]] = item[1]
        return dict_price

    @property
    def get_category(self):
        dict_category = {}
        for item in range(400, 2000):
            dict_category[str(item)] = str(item)
        return dict_category

    @property
    def get_nomenclature(self):
        dict_nomenclature = {}
        for item in range(4000, 30000):
            dict_nomenclature[str(item)] = str(item)
        return dict_nomenclature

    @property
    def get_dealer_price_remove(self):
        dict_dealer_price_remove = {}
        for item in range(4000, 30000):
            dict_dealer_price_remove[f'{str(item)}remove_dealer_price'] = str(item)
        return dict_dealer_price_remove

    @property
    def get_dealer_price_show(self):
        dict_dealer_price_show = {}
        for item in range(4000, 30000):
            dict_dealer_price_show[f'{str(item)}show_dealer_price'] = str(item)
        return dict_dealer_price_show

    @property
    def get_pages(self):
        dict_pages = {}
        for item in range(100):
            dict_pages['–°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages

    @property
    def get_pages_search(self):
        dict_pages_search = {}
        for item in range(100):
            dict_pages_search['–ü–æ–∏—Å–∫_–°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages_search

    @property
    def get_pages_basket(self):
        dict_pages_basket = {}
        for item in range(100):
            dict_pages_basket['–ö–æ—Ä–∑–∏–Ω–∞_–°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages_basket

    async def get_calculater(self, id_user: int, id_nomenclature: str):
        calculater = {f'{id_nomenclature}///1': '1‚É£', f'{id_nomenclature}///2': '2‚É£', f'{id_nomenclature}///3': '3‚É£',
                      f'{id_nomenclature}///4': '4‚É£', f'{id_nomenclature}///5': '5‚É£', f'{id_nomenclature}///6': '6‚É£',
                      f'{id_nomenclature}///7': '7‚É£', f'{id_nomenclature}///8': '8Ô∏è‚É£', f'{id_nomenclature}///9': '9‚É£',
                      f'{id_nomenclature}minus': '‚ûñ', f'{id_nomenclature}///0': '0Ô∏è‚É£',
                      f'{id_nomenclature}plus': '‚ûï',  f'{id_nomenclature}back_add': '‚óÄüëà –ù–∞–∑–∞–¥',
                      f'{id_nomenclature}delete': '‚å´', f'{id_nomenclature}done': '–ì–æ—Ç–æ–≤–æ ‚úÖüóëÔ∏è',
                      'basket': f'–ö–æ—Ä–∑–∏–Ω–∞ üõí(0 —à—Ç –Ω–∞ 0 —Ä—É–±.)'}
        amount = await self.execute.current_amount_basket(id_user)
        sum_basket = await self.execute.current_sum_basket(id_user)
        if amount is None:
            calculater['basket'] = f"–ö–æ—Ä–∑–∏–Ω–∞ üõí(0 —à—Ç. –Ω–∞ 0 ‚ÇΩ)"
        else:
            calculater['basket'] = f"–ö–æ—Ä–∑–∏–Ω–∞ üõí({int(amount)} —à—Ç. –Ω–∞ {self.format_price(float(sum_basket))})"
        return calculater

    @property
    def get_button_calculater(self):
        dict_button_calculater = {}
        for item in range(10):
            for id_nomenclature in range(4000, 30000):
                dict_button_calculater[f'{str(id_nomenclature)}///{str(item)}'] = str(item)
        return dict_button_calculater

    @staticmethod
    def get_dict_value(value: str, start: int, finish: int):
        dict_value = {}
        for item in range(start, finish):
            dict_value[f'{str(item)}{value}'] = str(item)
        return dict_value

    async def get_basket(self, id_user: int):
        basket = {}
        amount = await self.execute.current_amount_basket(id_user)
        sum_basket = await self.execute.current_sum_basket(id_user)
        if amount is None:
            basket['basket'] = {'russian': '–ö–æ—Ä–∑–∏–Ω–∞ üõí(0 —à—Ç. –Ω–∞ 0 ‚ÇΩ)',
                                'armenian': '‘∂’°’¥’¢’µ’∏÷Ç’≤ üõí(0 ’∞’°’ø 0 ‚ÇΩ)',
                                'azerbaijani': 'S…ôb…ôt (0 …ôd…ôd 0 ‚ÇΩ)',
                                'english': 'Basket üõí(0 pieces per 0 ‚ÇΩ)',
                                'georgian': '·Éô·Éê·Éö·Éê·Éó·Éê üõí(0 ·É™·Éê·Éö·Éò 0 ‚ÇΩ)',
                                'kazakh': '–°–µ–±–µ—Ç üõí(0 –¥–∞–Ω–∞ 0 ‚ÇΩ)',
                                'kyrgyz': '–°–µ–±–µ—Ç üõí(0 –¥–∞–∞–Ω–∞ 0 ‚ÇΩ)',
                                'mongolian': '–°–∞–≥—Å üõí(0 —à–∏—Ä—Ö—ç–≥ —Ç—É—Ç–∞–º–¥ 0 ‚ÇΩ)',
                                'tajik': '–°–∞–±–∞–¥ üõí(0 –¥–æ–Ω–∞ –±–∞ 0 ‚ÇΩ)',
                                'uzbek': 'Savat üõí(0 dona 0 ‚ÇΩ)'
                                }
        else:
            basket['basket'] = {'russian': f'–ö–æ—Ä–∑–∏–Ω–∞ üõí({int(amount)} —à—Ç. –Ω–∞ {self.format_price(float(sum_basket))})',
                                'armenian': f'‘∂’°’¥’¢’µ’∏÷Ç’≤ üõí({int(amount)} ’∞’°’ø {self.format_price(float(sum_basket))})',
                                'azerbaijani': f'S…ôb…ôt üõí({int(amount)} …ôd…ôd {self.format_price(float(sum_basket))})',
                                'english': f'Basket üõí({int(amount)} pieces per {self.format_price(float(sum_basket))})',
                                'georgian': f'·Éô·Éê·Éö·Éê·Éó·Éê üõí({int(amount)} ·É™·Éê·Éö·Éò {self.format_price(float(sum_basket))})',
                                'kazakh': f'–°–µ–±–µ—Ç üõí({int(amount)} –¥–∞–Ω–∞ {self.format_price(float(sum_basket))})',
                                'kyrgyz': f'–°–µ–±–µ—Ç üõí({int(amount)} –¥–∞–∞–Ω–∞ {self.format_price(float(sum_basket))})',
                                'mongolian': f'–°–∞–≥—Å üõí({int(amount)} —à–∏—Ä—Ö—ç–≥ —Ç—É—Ç–∞–º–¥ '
                                             f'{self.format_price(float(sum_basket))})',
                                'tajik': f'–°–∞–±–∞–¥ üõí({int(amount)} –¥–æ–Ω–∞ –±–∞ {self.format_price(float(sum_basket))})',
                                'uzbek': f'Savat üõí({int(amount)} dona {self.format_price(float(sum_basket))})',
                                }
        return basket

    @staticmethod
    def format_price(item: float):
        return '{0:,} ‚ÇΩ'.format(item).replace(',', ' ')

    @staticmethod
    def quote(request):
        return f"'{str(request)}'"
