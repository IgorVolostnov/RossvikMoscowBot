from execute import Execute
from operator import itemgetter
from language import Language


class DATA:
    def __init__(self):
        self.price = [['506', '–®–∏–Ω–æ—Ä–µ–º–æ–Ω—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚úÇ‚öí', 100],
                      ['507', '–í–µ–Ω—Ç–∏–ª–∏ üîå', 100],
                      ['556', '–†–µ–º–æ–Ω—Ç–Ω—ã–µ —à–∏–ø—ã ‚Äçüåµ', 100],
                      ['658', '–ì—Ä—É–∑–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ—á–Ω—ã–µ ‚öñ', 100],
                      ['552', '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üöóüîß', 100],
                      ['600', '–ü–æ–¥—ä–µ–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚õì', 100],
                      ['547', '–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üîß', 100],
                      ['608', '–°–ø–µ—Ü–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üõ†', 100],
                      ['726', '–ó–∞–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ ‚ùÑ', 100],
                      ['549', '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã ‚õΩ', 100],
                      ['597', '–ü–Ω–µ–≤–º–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üé£', 100],
                      ['707', '–ü–Ω–µ–≤–º–æ–ª–∏–Ω–∏–∏ üí®üíß', 100],
                      ['623', '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ üìúüöó', 100],
                      ['946', '–ú–æ–µ—á–Ω–æ-—É–±–æ—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üßπ', 100],
                      ['493', '–ê–≤—Ç–æ–•–∏–º–∏—è ‚ò£‚öó ', 100],
                      ['580', '–ì–∞—Ä–∞–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üë®üèæ‚Äçüîß', 100],
                      ['593', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üïµÔ∏è‚Äç‚ôÄ', 100],
                      ['603', '–ú–∞—Å–ª–æ—Å–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üí¶üõ¢Ô∏è', 100],
                      ['702', '–ó–∞–ø—á–∞—Å—Ç–∏ üß©‚öôÔ∏è', 100],
                      ['1101', '–°–∞–¥–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ üë©‚Äçüåæ', 100],
                      ['738', '–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üîã', 100],
                      ['1100', '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã üç±', 100],
                      ['688', '–ú–µ–±–µ–ª—å –¥–ª—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ üóÑÔ∏è', 100],
                      ['1095', '–í—ã—Ç—è–∂–∫–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–∞–∑–æ–≤ ‚ô®', 100],
                      ['660', '–°—Ö–æ–¥/—Ä–∞–∑–≤–∞–ª—ã üî©üìê', 100],
                      ['663', '–ú–æ–π–∫–∏ –¥–µ—Ç–∞–ª–µ–π üõÅ', 100],
                      ['692', '–≠–∫—Å–ø—Ä–µ—Å—Å-—Å–µ—Ä–≤–∏—Å üöÖü§ùüèª', 100],
                      ['942', '–ó–∞—Ä—è–¥–Ω—ã–µ –∏ –ø—É—Å–∫–æ-–∑–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚ö°', 100],
                      ['1237', '–†–µ–∂—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üî™', 100]]
        self.delivery = {'pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑',
                         'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞'}
        self.kind_pickup = {'record_answer_shop': '–ú–æ—Å–∫–≤–∞, –•–∞—á–∞—Ç—É—Ä—è–Ω–∞, 8 –∫–æ—Ä–ø—É—Å 3 (–ú–∞–≥–∞–∑–∏–Ω)',
                            'record_answer_storage': '–ú—ã—Ç–∏—â–∏, 1-–∞—è –ù–æ–≤–∞—è, 57 (–°–∫–ª–∞–¥)'}
        self.kind_delivery = {'record_answer_moscow': '–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î',
                              'record_answer_pek': '–¢–ö –ü–≠–ö',
                              'record_answer_dl': '–¢–ö –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏',
                              'record_answer_mt': '–¢–ö –ú–µ–π–¥–∂–∏–∫ –¢—Ä–∞–Ω—Å',
                              'record_answer_cdek': '–¢–ö –°–î–≠–ö'}
        self.execute = Execute()
        self.language_data = Language()

    async def get_first_keyboard(self, id_user: int):
        basket = await self.get_basket(id_user)
        amount_order = await self.execute.get_amount_order(id_user)
        type_user = await self.execute.status_user(id_user)
        if amount_order == 0:
            if type_user == 'creator':
                first_keyboard = {'https://t.me/rossvik_moscow': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                  'orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è',
                                  'basket': basket['basket'],
                                  'catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ',
                                  'update': '–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—èüí¨',
                                  'add_status': '–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Åüòé'}
            elif type_user == 'admin':
                first_keyboard = {'https://t.me/rossvik_moscow': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                  'orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è',
                                  'basket': basket['basket'],
                                  'catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ',
                                  'add_status': '–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Åüòé'}
            else:
                first_keyboard = {'https://t.me/rossvik_moscow': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                  'orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è',
                                  'basket': basket['basket'],
                                  'catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ'}
        else:
            if type_user == 'creator':
                first_keyboard = {'https://t.me/rossvik_moscow': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                  'orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è (–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {str(amount_order)})',
                                  'basket': basket['basket'],
                                  'catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ',
                                  'update': '–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—èüí¨',
                                  'add_status': '–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Åüòé'}
            elif type_user == 'admin':
                first_keyboard = {'https://t.me/rossvik_moscow': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                  'orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è (–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {str(amount_order)})',
                                  'basket': basket['basket'],
                                  'catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ',
                                  'add_status': '–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Åüòé'}
            else:
                first_keyboard = {'https://t.me/rossvik_moscow': '–ù–æ–≤–æ—Å—Ç–∏ üì£üåêüí¨',
                                  'orders': f'–ú–æ–∏ –ó–∞–∫–∞–∑—ã üóÉÔ∏è (–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {str(amount_order)})',
                                  'basket': basket['basket'],
                                  'catalog': '–ö–∞—Ç–∞–ª–æ–≥üßæüëÄ'}
        return first_keyboard

    def get_info_help(self, language_user: str) -> str:
        whitespace = '\n'
        first_str = f'–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'
        menu_str = f'–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        catalog_str = f'–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–∞'
        news_str = f'–Ω–æ–≤–æ—Å—Ç–∏'
        basket_str = f'–∫–æ—Ä–∑–∏–Ω–∞'
        order_str = f'–∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤'
        main_str = f'–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞:{whitespace}{whitespace}–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ ' \
                   f'–∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø—Ä–æ–±–µ–ª–∞–º–∏. –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, ' \
                   f'–Ω–æ –∏ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.{whitespace}–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —ç—Ç–æ ' \
                   f'—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ:{whitespace}–ø–ª–∞—Å—Ç –≤—Å—Ç{whitespace}{whitespace}' \
                   f'–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò: –í—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ë–æ—Ç–æ–º ' \
                   f'–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, ' \
                   f'–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é, ' \
                   f'—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—é –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ.'
        info = f"{self.language_data.translated_from_russian(language_user, first_str)}{whitespace}{whitespace}" \
               f"/start - {self.language_data.translated_from_russian(language_user, menu_str)}{whitespace}" \
               f"/catalog - {self.language_data.translated_from_russian(language_user, catalog_str)}{whitespace}" \
               f"/news - {self.language_data.translated_from_russian(language_user, news_str)}{whitespace}" \
               f"/basket - {self.language_data.translated_from_russian(language_user, basket_str)}{whitespace}" \
               f"/order - {self.language_data.translated_from_russian(language_user, order_str)}{whitespace}" \
               f"{whitespace}{self.language_data.translated_from_russian(language_user, main_str)}"
        return info

    @property
    def get_prices(self):
        dict_price = {}
        for item in sorted(self.price, key=itemgetter(2), reverse=False):
            dict_price[item[0]] = item[1]
        return dict_price

    @property
    def get_category(self):
        dict_category = {}
        for item in range(400, 2000):
            dict_category[str(item)] = str(item)
        return dict_category

    @property
    def get_nomenclature(self):
        dict_nomenclature = {}
        for item in range(4000, 30000):
            dict_nomenclature[str(item)] = str(item)
        return dict_nomenclature

    @property
    def get_dealer_price_remove(self):
        dict_dealer_price_remove = {}
        for item in range(4000, 30000):
            dict_dealer_price_remove[f'{str(item)}remove_dealer_price'] = str(item)
        return dict_dealer_price_remove

    @property
    def get_dealer_price_show(self):
        dict_dealer_price_show = {}
        for item in range(4000, 30000):
            dict_dealer_price_show[f'{str(item)}show_dealer_price'] = str(item)
        return dict_dealer_price_show

    @property
    def get_pages(self):
        dict_pages = {}
        for item in range(100):
            dict_pages['–°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages

    @property
    def get_pages_search(self):
        dict_pages_search = {}
        for item in range(100):
            dict_pages_search['–ü–æ–∏—Å–∫_–°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages_search

    @property
    def get_pages_basket(self):
        dict_pages_basket = {}
        for item in range(100):
            dict_pages_basket['–ö–æ—Ä–∑–∏–Ω–∞_–°—Ç—Ä.' + str(item)] = str(item)
        return dict_pages_basket

    async def get_calculater(self, id_user: int, id_nomenclature: str):
        calculater = {f'{id_nomenclature}///1': '1‚É£', f'{id_nomenclature}///2': '2‚É£', f'{id_nomenclature}///3': '3‚É£',
                      f'{id_nomenclature}///4': '4‚É£', f'{id_nomenclature}///5': '5‚É£', f'{id_nomenclature}///6': '6‚É£',
                      f'{id_nomenclature}///7': '7‚É£', f'{id_nomenclature}///8': '8Ô∏è‚É£', f'{id_nomenclature}///9': '9‚É£',
                      f'{id_nomenclature}minus': '‚ûñ', f'{id_nomenclature}///0': '0Ô∏è‚É£',
                      f'{id_nomenclature}plus': '‚ûï',  f'{id_nomenclature}back_add': '‚óÄüëà –ù–∞–∑–∞–¥',
                      f'{id_nomenclature}delete': '‚å´', f'{id_nomenclature}done': '–ì–æ—Ç–æ–≤–æ ‚úÖüóëÔ∏è',
                      'basket': f'–ö–æ—Ä–∑–∏–Ω–∞ üõí(0 —à—Ç –Ω–∞ 0 —Ä—É–±.)'}
        amount = await self.execute.current_amount_basket(id_user)
        sum_basket = await self.execute.current_sum_basket(id_user)
        if amount is None:
            calculater['basket'] = f"–ö–æ—Ä–∑–∏–Ω–∞ üõí(0 —à—Ç. –Ω–∞ 0 ‚ÇΩ)"
        else:
            calculater['basket'] = f"–ö–æ—Ä–∑–∏–Ω–∞ üõí({int(amount)} —à—Ç. –Ω–∞ {self.format_price(float(sum_basket))})"
        return calculater

    @property
    def get_button_calculater(self):
        dict_button_calculater = {}
        for item in range(10):
            for id_nomenclature in range(4000, 30000):
                dict_button_calculater[f'{str(id_nomenclature)}///{str(item)}'] = str(item)
        return dict_button_calculater

    @staticmethod
    def get_dict_value(value: str, start: int, finish: int):
        dict_value = {}
        for item in range(start, finish):
            dict_value[f'{str(item)}{value}'] = str(item)
        return dict_value

    async def get_basket(self, id_user: int):
        basket = {}
        amount = await self.execute.current_amount_basket(id_user)
        sum_basket = await self.execute.current_sum_basket(id_user)
        if amount is None:
            basket['basket'] = f"–ö–æ—Ä–∑–∏–Ω–∞ üõí(0 —à—Ç. –Ω–∞ 0 ‚ÇΩ)"
        else:
            basket['basket'] = f"–ö–æ—Ä–∑–∏–Ω–∞ üõí({int(amount)} —à—Ç. –Ω–∞ {self.format_price(float(sum_basket))})"
        return basket

    @staticmethod
    def format_price(item: float):
        return '{0:,} ‚ÇΩ'.format(item).replace(',', ' ')

    @staticmethod
    def quote(request):
        return f"'{str(request)}'"
